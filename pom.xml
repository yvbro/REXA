<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>fr.yvbro</groupId>
	<artifactId>rexa</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>rexa</name>
	<description>Reporting Xnat Application</description>

	<properties>
		<java.version>11</java.version>
		<kotlin.version>1.6.0</kotlin.version>

		<!-- Database & framework related-->
		<postgresql.version>42.3.3</postgresql.version>
		<jooq.version>3.13.1</jooq.version>
		<!-- Flyway -->
		<flyway-core.version>6.5.7</flyway-core.version>
		<flyway.user>rexaAdmin</flyway.user>
		<flyway.password>rexaAdmin</flyway.password>
		<flyway.schemas>rexa</flyway.schemas>
		<flyway.url>jdbc:postgresql://localhost:5442/rexa</flyway.url>

		<!-- Test -->
		<junit.version>5.5.2</junit.version>
		<junit4.version>4.13.2</junit4.version>
		<mockito.version>2.23.4</mockito.version>
		<assert.verison>3.8.0</assert.verison>
		<testcontainers.version>1.15.2</testcontainers.version>
		<kotest.version>4.4.3</kotest.version>

		<!-- Other Libs -->
		<jackson.version>2.10.0</jackson.version>
		<json.version>20190722</json.version>
		<kittinunf.version>2.2.0</kittinunf.version>
		<slf4j.version>1.7.28</slf4j.version>
		<annotations.version>13.0</annotations.version>
		<jakarta-validation.version>2.0.1</jakarta-validation.version>
		<jjwt.version>0.5.1</jjwt.version>
		<crypto.version>5.4.1</crypto.version>

		<!-- Maven -->
		<frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
		<node.version>v12.13.1</node.version>
		<yarn.version>v1.19.2</yarn.version>
		<asm.version>7.3.1</asm.version>
		<maven-dependency-analyzer.version>1.11.1</maven-dependency-analyzer.version>

		<!--DOCKER-->
		<docker.image.name>rexa</docker.image.name>
		<fabric8.version>0.32.0</fabric8.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-commons -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-commons</artifactId>
		</dependency>


		<!-- Springboot DevTools to provide additional development-time features -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.skyscreamer</groupId>
					<artifactId>jsonassert</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.github.kittinunf.fuel</groupId>
			<artifactId>fuel</artifactId>
			<version>${kittinunf.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.kittinunf.result</groupId>
			<artifactId>result</artifactId>
			<version>${kittinunf.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-kotlin</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<!-- Libs -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>${annotations.version}</version>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>${json.version}</version>
		</dependency>
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
			<version>${jakarta-validation.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
			<version>${crypto.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit4.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test</artifactId>
			<version>${kotlin.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test-junit5</artifactId>
			<version>${kotlin.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.kotest</groupId>
			<artifactId>kotest-assertions-core-jvm</artifactId>
			<version>${kotest.version}</version>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway-core.version}</version>
            <scope>test</scope>
        </dependency>

		<!-- https://mvnrepository.com/artifact/org.jooq/jooq -->
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>${jooq.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>${jjwt.version}</version>
		</dependency>

	</dependencies>

	<repositories>
		<repository>
			<id>jcenter</id>
			<url>https://jcenter.bintray.com/</url>
		</repository>
	</repositories>

	<build>
		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<configuration>
					<args>
						<arg>-Xjsr305=strict</arg>
					</args>
					<compilerPlugins>
						<plugin>spring</plugin>
					</compilerPlugins>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-allopen</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<version>${flyway-core.version}</version>
				<configuration>
					<user>${flyway.user}</user>
					<url>${flyway.url}</url>
					<password>${flyway.password}</password>
					<schemas>${flyway.schemas}</schemas>
				</configuration>
			</plugin>

			<plugin>
				<!-- This plugin checks that we have declared as a dependency any class that we directly import -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven-dependency-plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.ow2.asm</groupId>
						<artifactId>asm</artifactId>
						<version>${asm.version}</version>
					</dependency>
					<dependency>
						<groupId>org.apache.maven.shared</groupId>
						<artifactId>maven-dependency-analyzer</artifactId>
						<version>${maven-dependency-analyzer.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<goals>
							<goal>analyze</goal>
						</goals>
						<phase>verify</phase>
					</execution>
				</executions>
				<configuration>
					<failOnWarning>true</failOnWarning>
					<!-- As there are lots of classpath auto discovery we can only apply the analysis to compile dependencies -->
					<ignoreNonCompile>true</ignoreNonCompile>

					<ignoredDependencies>
						<!-- org.springframework*: spring boot starter not analyzed correctly by the plugin,
                             triggering lots of false positives. -->
						<ignoredDependency>org.springframework*</ignoredDependency>

						<!-- org.jooq: same for jooq -->
						<ignoredDependency>org.jooq</ignoredDependency>

						<!-- tomcat-embed-core : includes the servlet api (eg. HttpServletRequest object) in the jar !
                            as we are using those, it thinks we should include the jar as compile, but in fact
                            we are using the standalone javax.servlet:servlet-api dependency for compile (as provided) scope -->
						<ignoredDependency>org.apache.tomcat.embed:tomcat-embed-core</ignoredDependency>

						<!-- com.fasterxml.jackson: imported through com.mirakl:spring-boot-starter-api,
                                with version defined in spring-boot-dependencies -->
						<ignoredDependency>com.fasterxml.jackson.*</ignoredDependency>
					</ignoredDependencies>
				</configuration>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image.name}</name>
							<alias>dockerfile</alias>
							<build>
								<filter>@</filter>
								<dockerFileDir>${project.basedir}/tools/docker</dockerFileDir>
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<tags>
									<tag>latest</tag>
									<tag>${project.version}</tag>
								</tags>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>front-gen</id>
			<build>
				<plugins>
					<!-- Plugin to build the react app -->
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>${frontend-maven-plugin.version}</version>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<yarnVersion>${yarn.version}</yarnVersion>
							<workingDirectory>frontend</workingDirectory>
							<installDirectory>target</installDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and npm</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
							</execution>
							<execution>
								<id>yarn-install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<arguments>install --frozen-lockfile</arguments>
								</configuration>
							</execution>
							<execution>
								<id>run tests</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<arguments>run test --watchAll=false</arguments>
								</configuration>
							</execution>
							<execution>
								<id>build-frontend</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<arguments>run build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to move the react build into our target -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>generate-resources</phase>
								<configuration>
									<target>
										<copy todir="${project.build.directory}/classes/public">
											<fileset dir="${project.basedir}/frontend/build"/>
										</copy>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jooq-gen</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jooq</groupId>
						<artifactId>jooq-codegen-maven</artifactId>
						<version>${jooq.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.postgresql</groupId>
								<artifactId>postgresql</artifactId>
								<version>${postgresql.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<jdbc>
								<driver>org.postgresql.Driver</driver>
								<user>${flyway.user}</user>
								<url>${flyway.url}</url>
								<password>${flyway.password}</password>
							</jdbc>
							<generator>
								<strategy>
									<name>org.jooq.codegen.example.JPrefixGeneratorStrategy</name>
								</strategy>
								<database>
									<name>org.jooq.meta.postgres.PostgresDatabase</name>
									<includes>.*</includes>
									<excludes>flyway_schema_history</excludes>
									<inputSchema>${flyway.schemas}</inputSchema>
								</database>
								<target>
									<packageName>fr.yvbro.rexa.jooq.generated</packageName>
									<directory>src/main/kotlin</directory>
								</target>
							</generator>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
