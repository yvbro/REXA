/*
 * This file is generated by jOOQ.
 */
package fr.yvernault.rexa.jooq.generated.tables;


import fr.yvernault.rexa.jooq.generated.JRexa;
import fr.yvernault.rexa.jooq.generated.Keys;
import fr.yvernault.rexa.jooq.generated.tables.records.JSettingsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSettings extends TableImpl<JSettingsRecord> {

    private static final long serialVersionUID = -210972865;

    /**
     * The reference instance of <code>rexa.settings</code>
     */
    public static final JSettings SETTINGS = new JSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JSettingsRecord> getRecordType() {
        return JSettingsRecord.class;
    }

    /**
     * The column <code>rexa.settings.id</code>.
     */
    public final TableField<JSettingsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('rexa.settings_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rexa.settings.xnat_username</code>.
     */
    public final TableField<JSettingsRecord, String> XNAT_USERNAME = createField(DSL.name("xnat_username"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>rexa.settings.xnat_password</code>.
     */
    public final TableField<JSettingsRecord, String> XNAT_PASSWORD = createField(DSL.name("xnat_password"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>rexa.settings.xnat_url</code>.
     */
    public final TableField<JSettingsRecord, String> XNAT_URL = createField(DSL.name("xnat_url"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>rexa.settings</code> table reference
     */
    public JSettings() {
        this(DSL.name("settings"), null);
    }

    /**
     * Create an aliased <code>rexa.settings</code> table reference
     */
    public JSettings(String alias) {
        this(DSL.name(alias), SETTINGS);
    }

    /**
     * Create an aliased <code>rexa.settings</code> table reference
     */
    public JSettings(Name alias) {
        this(alias, SETTINGS);
    }

    private JSettings(Name alias, Table<JSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JSettings(Name alias, Table<JSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JSettings(Table<O> child, ForeignKey<O, JSettingsRecord> key) {
        super(child, key, SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return JRexa.REXA;
    }

    @Override
    public Identity<JSettingsRecord, Long> getIdentity() {
        return Keys.IDENTITY_SETTINGS;
    }

    @Override
    public UniqueKey<JSettingsRecord> getPrimaryKey() {
        return Keys.SETTINGS_PKEY;
    }

    @Override
    public List<UniqueKey<JSettingsRecord>> getKeys() {
        return Arrays.<UniqueKey<JSettingsRecord>>asList(Keys.SETTINGS_PKEY);
    }

    @Override
    public JSettings as(String alias) {
        return new JSettings(DSL.name(alias), this);
    }

    @Override
    public JSettings as(Name alias) {
        return new JSettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSettings rename(String name) {
        return new JSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSettings rename(Name name) {
        return new JSettings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
