/*
 * This file is generated by jOOQ.
 */
package fr.yvernault.rexa.jooq.generated;


import fr.yvernault.rexa.jooq.generated.tables.JSchemaVersion;
import fr.yvernault.rexa.jooq.generated.tables.JSettings;
import fr.yvernault.rexa.jooq.generated.tables.records.JSchemaVersionRecord;
import fr.yvernault.rexa.jooq.generated.tables.records.JSettingsRecord;

import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>rexa</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<JSettingsRecord, Long> IDENTITY_SETTINGS = Identities0.IDENTITY_SETTINGS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JSchemaVersionRecord> SCHEMA_VERSION_PK = UniqueKeys0.SCHEMA_VERSION_PK;
    public static final UniqueKey<JSettingsRecord> SETTINGS_PKEY = UniqueKeys0.SETTINGS_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<JSettingsRecord, Long> IDENTITY_SETTINGS = Internal.createIdentity(JSettings.SETTINGS, JSettings.SETTINGS.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<JSchemaVersionRecord> SCHEMA_VERSION_PK = Internal.createUniqueKey(JSchemaVersion.SCHEMA_VERSION, "schema_version_pk", new TableField[] { JSchemaVersion.SCHEMA_VERSION.VERSION }, true);
        public static final UniqueKey<JSettingsRecord> SETTINGS_PKEY = Internal.createUniqueKey(JSettings.SETTINGS, "settings_pkey", new TableField[] { JSettings.SETTINGS.ID }, true);
    }
}
