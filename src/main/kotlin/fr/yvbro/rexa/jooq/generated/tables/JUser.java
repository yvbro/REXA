/*
 * This file is generated by jOOQ.
 */
package fr.yvbro.rexa.jooq.generated.tables;


import fr.yvbro.rexa.jooq.generated.JRexa;
import fr.yvbro.rexa.jooq.generated.Keys;
import fr.yvbro.rexa.jooq.generated.tables.records.JUserRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class JUser extends TableImpl<JUserRecord> {

    /**
     * The reference instance of <code>rexa.user</code>
     */
    public static final JUser USER = new JUser();
    private static final long serialVersionUID = -1913586413;
    /**
     * The column <code>rexa.user.id</code>.
     */
    public final TableField<JUserRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");
    /**
     * The column <code>rexa.user.email</code>.
     */
    public final TableField<JUserRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>rexa.user.password</code>.
     */
    public final TableField<JUserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>rexa.user.auth_provider</code>.
     */
    public final TableField<JUserRecord, String> AUTH_PROVIDER = createField(DSL.name("auth_provider"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>rexa.user</code> table reference
     */
    public JUser() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>rexa.user</code> table reference
     */
    public JUser(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>rexa.user</code> table reference
     */
    public JUser(Name alias) {
        this(alias, USER);
    }

    private JUser(Name alias, Table<JUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private JUser(Name alias, Table<JUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JUser(Table<O> child, ForeignKey<O, JUserRecord> key) {
        super(child, key, USER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUserRecord> getRecordType() {
        return JUserRecord.class;
    }

    @Override
    public Schema getSchema() {
        return JRexa.REXA;
    }

    @Override
    public UniqueKey<JUserRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    @Override
    public List<UniqueKey<JUserRecord>> getKeys() {
        return Arrays.<UniqueKey<JUserRecord>>asList(Keys.USER_PKEY);
    }

    @Override
    public JUser as(String alias) {
        return new JUser(DSL.name(alias), this);
    }

    @Override
    public JUser as(Name alias) {
        return new JUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(String name) {
        return new JUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(Name name) {
        return new JUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
