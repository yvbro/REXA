/*
 * This file is generated by jOOQ.
 */
package fr.yvbro.rexa.jooq.generated.tables;


import fr.yvbro.rexa.jooq.generated.JRexa;
import fr.yvbro.rexa.jooq.generated.Keys;
import fr.yvbro.rexa.jooq.generated.tables.records.JRolesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JRoles extends TableImpl<JRolesRecord> {

    private static final long serialVersionUID = 1887365779;

    /**
     * The reference instance of <code>rexa.roles</code>
     */
    public static final JRoles ROLES = new JRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JRolesRecord> getRecordType() {
        return JRolesRecord.class;
    }

    /**
     * The column <code>rexa.roles.id</code>.
     */
    public final TableField<JRolesRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>rexa.roles.name</code>.
     */
    public final TableField<JRolesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>rexa.roles</code> table reference
     */
    public JRoles() {
        this(DSL.name("roles"), null);
    }

    /**
     * Create an aliased <code>rexa.roles</code> table reference
     */
    public JRoles(String alias) {
        this(DSL.name(alias), ROLES);
    }

    /**
     * Create an aliased <code>rexa.roles</code> table reference
     */
    public JRoles(Name alias) {
        this(alias, ROLES);
    }

    private JRoles(Name alias, Table<JRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private JRoles(Name alias, Table<JRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JRoles(Table<O> child, ForeignKey<O, JRolesRecord> key) {
        super(child, key, ROLES);
    }

    @Override
    public Schema getSchema() {
        return JRexa.REXA;
    }

    @Override
    public UniqueKey<JRolesRecord> getPrimaryKey() {
        return Keys.ROLES_PKEY;
    }

    @Override
    public List<UniqueKey<JRolesRecord>> getKeys() {
        return Arrays.<UniqueKey<JRolesRecord>>asList(Keys.ROLES_PKEY);
    }

    @Override
    public JRoles as(String alias) {
        return new JRoles(DSL.name(alias), this);
    }

    @Override
    public JRoles as(Name alias) {
        return new JRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JRoles rename(String name) {
        return new JRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRoles rename(Name name) {
        return new JRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
