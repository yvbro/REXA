/*
 * This file is generated by jOOQ.
 */
package fr.yvbro.rexa.jooq.generated.tables;


import fr.yvbro.rexa.jooq.generated.JRexa;
import fr.yvbro.rexa.jooq.generated.Keys;
import fr.yvbro.rexa.jooq.generated.tables.records.JUserRoleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUserRole extends TableImpl<JUserRoleRecord> {

    private static final long serialVersionUID = 481577432;

    /**
     * The reference instance of <code>rexa.user_role</code>
     */
    public static final JUserRole USER_ROLE = new JUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUserRoleRecord> getRecordType() {
        return JUserRoleRecord.class;
    }

    /**
     * The column <code>rexa.user_role.user_id</code>.
     */
    public final TableField<JUserRoleRecord, UUID> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>rexa.user_role.role_id</code>.
     */
    public final TableField<JUserRoleRecord, UUID> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>rexa.user_role</code> table reference
     */
    public JUserRole() {
        this(DSL.name("user_role"), null);
    }

    /**
     * Create an aliased <code>rexa.user_role</code> table reference
     */
    public JUserRole(String alias) {
        this(DSL.name(alias), USER_ROLE);
    }

    /**
     * Create an aliased <code>rexa.user_role</code> table reference
     */
    public JUserRole(Name alias) {
        this(alias, USER_ROLE);
    }

    private JUserRole(Name alias, Table<JUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private JUserRole(Name alias, Table<JUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JUserRole(Table<O> child, ForeignKey<O, JUserRoleRecord> key) {
        super(child, key, USER_ROLE);
    }

    @Override
    public Schema getSchema() {
        return JRexa.REXA;
    }

    @Override
    public List<ForeignKey<JUserRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JUserRoleRecord, ?>>asList(Keys.USER_ROLE__USER_ROLE_USER_ID_FKEY, Keys.USER_ROLE__USER_ROLE_ROLE_ID_FKEY);
    }

    public JUser user() {
        return new JUser(this, Keys.USER_ROLE__USER_ROLE_USER_ID_FKEY);
    }

    public JRoles roles() {
        return new JRoles(this, Keys.USER_ROLE__USER_ROLE_ROLE_ID_FKEY);
    }

    @Override
    public JUserRole as(String alias) {
        return new JUserRole(DSL.name(alias), this);
    }

    @Override
    public JUserRole as(Name alias) {
        return new JUserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserRole rename(String name) {
        return new JUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserRole rename(Name name) {
        return new JUserRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
